<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un TextTemplate.
//     Generation : <#= DateTime.Now #>
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

<#
 string fileName = @"C:\Projet\Git\LinqToFile\WinTest\FileColumn.xml";
#>

using System.Collections.Generic;
using LinqToFile;
using System.Linq;

namespace WinTest
{

 <# foreach (var field in LoadXml(fileName)) { 	#>
 <#= field #>
 <#  }#>	

}


  <#+ 
   static IEnumerable<string> LoadXml(string fichier)
        {

            System.Xml.Linq.XDocument xml = null;
            try
            {
                xml = System.Xml.Linq.XDocument.Load(fichier);
            }
            catch
            {
                yield break;
            }
            if (xml == null)
                yield break;

            foreach (var table in (from x in xml.Root.Elements("Table") select x))
            {
                //System.Xml.Linq.XElement Ele = .FirstOrDefault();
                //if (Ele == null)
                //    yield break;


                int Index = 0;

                foreach (var field in from c in table.Elements()
                                      select new
                                      {
                                          Name = c.Attribute("Name")?.Value,
                                          FieldIndex = ParseInt32(c.Attribute("FieldIndex")?.Value) == null ? ++Index : Index = ParseInt32(c.Attribute("FieldIndex")?.Value).Value,
                                          Property = c.Attribute("Property")?.Value == null ? c.Attribute("Name")?.Value : c.Attribute("Property")?.Value,
                                          MaxLength = c.Attribute("MaxLength")?.Value,
                                          FillChar = c.Attribute("FillChar")?.Value,
                                          UsePropertyAsName = c.Attribute("UsePropertyAsName")?.Value,
                                          PassOver = c.Attribute("PassOver")?.Value,
                                          CanBeNull = c.Attribute("CanBeNull")?.Value,
                                          NumberStyle = c.Attribute("NumberStyle")?.Value,
                                          OutputFormat = c.Attribute("OutputFormat")?.Value,
                                          TextAlign = c.Attribute("TextAlign")?.Value,
                                          WithOutSeparator = c.Attribute("WithOutSeparator")?.Value,
                                      })

                {
                    List<string> Argument = new List<string>();

                    if (field?.FieldIndex != null)
                        Argument.Add($"FieldIndex = {field.FieldIndex}");

                    if (field?.Property != null)
                        Argument.Add($"Property = {field.Property}");

                    if (field?.Name != null)
                        Argument.Add($"Name = {field.Name}");

                    if (field?.UsePropertyAsName != null)
                        Argument.Add($"UsePropertyAsName = {field.UsePropertyAsName}");

                    if (field?.MaxLength != null)
                        Argument.Add($"MaxLength = {field.MaxLength}");

                    if (field?.FillChar != null)
                        Argument.Add($"FillChar = {field.FillChar}");

                    if (field?.PassOver != null)
                        Argument.Add($"PassOver = {field.PassOver}");

                    if (field?.CanBeNull != null)
                        Argument.Add($"CanBeNull = {field.CanBeNull}");

                    if (field?.NumberStyle != null)
                        Argument.Add($"NumberStyle = {field.NumberStyle}");


                    if (field?.OutputFormat != null)
                        Argument.Add($"OutputFormat = {field.OutputFormat}");

                    if (field?.TextAlign != null)
                        Argument.Add($"TextAlign = {field.TextAlign}");

                    if (field?.WithOutSeparator != null)
                        Argument.Add($"WithOutSeparator = {field.WithOutSeparator}");

                    if (Argument.Count > 0)
                        yield return $"[FileColumn({ Argument.Aggregate((x, y) => x + "," + y) })]";
                }

               
                yield return $"public partial class {table.Attribute("Name")?.Value}";
                yield return "{";
                yield return "}";
				 yield return "";
            }


        }

        public static int? ParseInt32(string str)
        {
            int result;
            return Int32.TryParse(str, out result) ? result : (int?)null;
        }
  #>